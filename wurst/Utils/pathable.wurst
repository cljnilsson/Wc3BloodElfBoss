package pathable

import LinkedList

constant real    MAX_RANGE     = 10.
constant integer DUMMY_ITEM_ID = 'wolg'

LinkedList<item> list          = new LinkedList<item>()

item pathChecker
rect detect

public function vec2.isTerrainWalkable() returns boolean
    return isTerrainWalkable(this.x, this.y)

public function isTerrainWalkable(vec2 pos) returns boolean
    return isTerrainWalkable(pos.x, pos.y)

function showItems()
    for item i in list
        i.setVisible(true)
        list.remove(i)

function hideItem()
    item i = GetEnumItem()
    if IsItemVisible(i)
        i.setVisible(false)
        list.push(i)

function hideNearbyItems(real x, real y)
    detect.moveTo(x, y)
    EnumItemsInRect(detect ,null, function hideItem)

function isTerrainWalkable(real x, real y) returns boolean
    hideNearbyItems(x, y)
    pathChecker.setPos(x, y)
    real itemPosX = pathChecker.getX()
    real itemPosY = pathChecker.getY()

    showItems()
    return (itemPosX-x)*(itemPosX-x)+(itemPosY-y)*(itemPosY-y) <= MAX_RANGE*MAX_RANGE and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY)

init    
    detect = Rect(0, 0, 128, 128)
    pathChecker = CreateItem(DUMMY_ITEM_ID, 0, 0)
    ..setVisible(false)