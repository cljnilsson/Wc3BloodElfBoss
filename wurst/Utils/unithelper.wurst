package unithelper

import LinkedList

// this map only
public function makeMainUnits()
	createUnit(players[1], 'Uktl', gg_rct_start.getCenter(), angle(0))
	..setLevel(4, false)
	..selectSkill('A003')
	..selectSkill('A002')
	..selectSkill('A005')
	..selectSkill('AUfn')

	createUnit(players[0], 'Uear', gg_rct_start.getCenter(), angle(0))
	..setLevel(4, false)
	..selectSkill('AUdc')
	..selectSkill('AUdp')
	..selectSkill('A001')
	..selectSkill('A006')

public function group.toLinkedList() returns LinkedList<unit>
	let list = new LinkedList<unit>()

	for unit u in this
		list.add(u)

	this.destr()
	
	return list

public function vec2.getNearEnemyUnitsEx(real r, unit source) returns LinkedList<unit>
	let l = Location(this.x, this.y)
	let g = GetUnitsInRangeOfLocAll(r, l)
	let o = source.getOwner()

	for u in g
		if u.getOwner() == o
			g.removeUnit(u)
			
	return g.toLinkedList()  

public function vec2.getNearUnitsEx(real r) returns LinkedList<unit>
	let l = Location(this.x, this.y)
	let g = GetUnitsInRangeOfLocAll(r, l)

	return g.toLinkedList()

public function vec2.getNearUnits() returns LinkedList<unit>
	return this.getNearUnitsEx(9999)

public function unit.getNearUnits() returns LinkedList<unit>
	return this.getPos().getNearUnits()

public function unit.getNearestEnemyUnit() returns unit
	let list = this.getNearUnits()
	real leader = 9999
	unit winner = null

	for unit u in list
		if u.isEnemyOf(this)
			let dist = u.getPos().distanceTo(this.getPos())
			if dist < leader
				leader = dist
				winner = u

	destroy list

	return winner